//
// Created by Michael Heuer on 10.05.16.
//

#ifndef RTQC_BSPLINEGENERATOR_H
#define RTQC_BSPLINEGENERATOR_H

#include <Eigen/Core>
#include <Eigen/SVD>

#include "BSplineBasis.h"
#include "BSpline.h"

/*! Includes methods and attributes that can be used by all BSplineGenerators
 * - methods for creating parameters and knotVectors from the NURBS book by Piegl 1997:
 * generateParametersByEquallySpacedMethod() uses eq. (9.3)
 * generateParametersByChordLengthMethod() uses eqs. (9.4)-(9.5)
 * generateKnotVectorByDeBoorMethod() uses the eqs. (9.68-9.69)
 * generateKnotVectorByEquallySpacedMethod() uses eq. (9.7)
 * generateKnotVectorByKnotAveraging() uses eq. (9.8)
 * */

class BSplineGenerator {
public:
  BSplineGenerator(const Eigen::MatrixXd & dataPoints,
                   const unsigned splineDegree);
  BSplineGenerator(const Eigen::MatrixXd & dataPoints,
                   const unsigned numberOfControlPoints,
                   const unsigned splineDegree);

  virtual ~BSplineGenerator() {}
  virtual BSpline generateBSpline(int highestDerivativeOrder = -1);

protected:
  virtual void initializeGenerator()=0;
  virtual void generateControlPointMatrix()=0;

  virtual void setDataPoints(Eigen::MatrixXd dataPoints);
  virtual void setSplineDegree(const unsigned splineDegree);

  /* Creates a parameter for every data point and distributes them equally ranging from 0 to 1.
   * only feasible if the data is very evenly distributed */
  void generateParametersByEquallySpacedMethod();

  void generateParametersByCentripetalMethod();

  /* This method has to be used if the data is unevenly spaced */
  void generateParametersByChordLengthMethod();

  /* If this method is used, the parameters must be generated by the chord length method in order to  prevent
   * that the resulting system of linear equations gets singular. */
  void generateKnotVectorByDeBoorsMethod();

  /* only feasible if the data is very evenly distributed s*/
  void generateKnotVectorByUniformMethod();

  void generateKnotVectorByKnotAveraging();

  unsigned p_,dim_,m_,n_;
  Eigen::VectorXd U_,uBar_;
  Eigen::MatrixXd P_,R_;
  BSplineBasis bsBasis_;
};

#endif //RTQC_BSPLINEGENERATOR_H
